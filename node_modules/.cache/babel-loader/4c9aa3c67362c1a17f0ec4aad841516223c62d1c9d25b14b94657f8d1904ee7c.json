{"ast":null,"code":"var _jsxFileName = \"/media/mobcoder/HDD 1TB1/vashuddha/src/component/Modal.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport SpeechRecognition, { useSpeechRecognition } from \"react-speech-recognition\";\nimport openmic from \"../images/openmic.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Modal(props) {\n  _s();\n  const {\n    transcript,\n    listening,\n    resetTranscript,\n    browserSupportsSpeechRecognition,\n    interimTranscript,\n    finalTranscript\n  } = useSpeechRecognition();\n  useEffect(() => {\n    if (transcript && listening) {\n      props.handleChange(transcript);\n    } else if (finalTranscript && !listening) {\n      props.handleSubmit();\n      resetTranscript();\n      props.isClose();\n    }\n  }, [transcript, listening]);\n  useEffect(() => {\n    if (props.open) {\n      setTimeout(() => {\n        SpeechRecognition.startListening();\n      }, 2000);\n    }\n  }, [props.open]);\n  if (!browserSupportsSpeechRecognition) {\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"Browser doesn't support speech recognition.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"myModal\",\n    className: `${props.open ? \"modal-open\" : \"modal-close\"}`,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"close\",\n        onClick: () => props.isClose(),\n        children: \"\\xD7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Microphone: \", listening ? \"on\" : \"off\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mic-main\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: transcript\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [le, /*#__PURE__*/_jsxDEV(\"img\", {\n              src: openmic,\n              onClick: SpeechRecognition.startListening,\n              width: \"30\",\n              className: \"cursor-pointer\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: SpeechRecognition.stopListening,\n              children: \"Stop\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n_s(Modal, \"FXFf75mwcMiQpFZcUZVfN1XAXfA=\", false, function () {\n  return [useSpeechRecognition];\n});\n_c = Modal;\nexport default Modal;\nvar _c;\n$RefreshReg$(_c, \"Modal\");","map":{"version":3,"names":["React","useEffect","SpeechRecognition","useSpeechRecognition","openmic","Modal","props","transcript","listening","resetTranscript","browserSupportsSpeechRecognition","interimTranscript","finalTranscript","handleChange","handleSubmit","isClose","open","setTimeout","startListening","le","stopListening"],"sources":["/media/mobcoder/HDD 1TB1/vashuddha/src/component/Modal.js"],"sourcesContent":["import React, { useEffect } from \"react\";\nimport SpeechRecognition, {\n  useSpeechRecognition,\n} from \"react-speech-recognition\";\nimport openmic from \"../images/openmic.svg\";\nfunction Modal(props) {\n  const {\n    transcript,\n    listening,\n    resetTranscript,\n    browserSupportsSpeechRecognition,\n    interimTranscript,\n    finalTranscript,\n  } = useSpeechRecognition();\n\n\n  useEffect(() => {\n    if (transcript&&listening) {\n      props.handleChange(transcript);\n    }else if(finalTranscript&&!listening){\n        props.handleSubmit()\n        resetTranscript()\n        props.isClose()\n    }\n  }, [transcript,listening]);\n\n  useEffect(()=>{\nif(props.open){\n    setTimeout(() => {\n        SpeechRecognition.startListening()\n    }, 2000);\n}\n  },[props.open])\n  if (!browserSupportsSpeechRecognition) {\n    return <span>Browser doesn't support speech recognition.</span>;\n  }\n  return (\n    <div\n      id=\"myModal\"\n      className={`${props.open ? \"modal-open\" : \"modal-close\"}`}\n    >\n      <div className=\"modal-content\">\n        <span className=\"close\" onClick={() => props.isClose()}>\n          &times;\n        </span>\n        <div>\n          <p>Microphone: {listening ? \"on\" : \"off\"}</p>\n          <div className=\"mic-main\">\n            <div>\n                <h3>\n\n            {transcript}\n                </h3>\n            </div>\n            <div>\n              {\n                le\n              }  \n            <img\n            src={openmic}\n            onClick={SpeechRecognition.startListening}\n            width=\"30\"\n            className=\"cursor-pointer\"\n          />\n          <button onClick={SpeechRecognition.stopListening}>Stop</button>\n            </div>\n          </div>\n          \n          \n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Modal;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,iBAAiB,IACtBC,oBAAoB,QACf,0BAA0B;AACjC,OAAOC,OAAO,MAAM,uBAAuB;AAAC;AAC5C,SAASC,KAAK,CAACC,KAAK,EAAE;EAAA;EACpB,MAAM;IACJC,UAAU;IACVC,SAAS;IACTC,eAAe;IACfC,gCAAgC;IAChCC,iBAAiB;IACjBC;EACF,CAAC,GAAGT,oBAAoB,EAAE;EAG1BF,SAAS,CAAC,MAAM;IACd,IAAIM,UAAU,IAAEC,SAAS,EAAE;MACzBF,KAAK,CAACO,YAAY,CAACN,UAAU,CAAC;IAChC,CAAC,MAAK,IAAGK,eAAe,IAAE,CAACJ,SAAS,EAAC;MACjCF,KAAK,CAACQ,YAAY,EAAE;MACpBL,eAAe,EAAE;MACjBH,KAAK,CAACS,OAAO,EAAE;IACnB;EACF,CAAC,EAAE,CAACR,UAAU,EAACC,SAAS,CAAC,CAAC;EAE1BP,SAAS,CAAC,MAAI;IAChB,IAAGK,KAAK,CAACU,IAAI,EAAC;MACVC,UAAU,CAAC,MAAM;QACbf,iBAAiB,CAACgB,cAAc,EAAE;MACtC,CAAC,EAAE,IAAI,CAAC;IACZ;EACE,CAAC,EAAC,CAACZ,KAAK,CAACU,IAAI,CAAC,CAAC;EACf,IAAI,CAACN,gCAAgC,EAAE;IACrC,oBAAO;MAAA,UAAM;IAA2C;MAAA;MAAA;MAAA;IAAA,QAAO;EACjE;EACA,oBACE;IACE,EAAE,EAAC,SAAS;IACZ,SAAS,EAAG,GAAEJ,KAAK,CAACU,IAAI,GAAG,YAAY,GAAG,aAAc,EAAE;IAAA,uBAE1D;MAAK,SAAS,EAAC,eAAe;MAAA,wBAC5B;QAAM,SAAS,EAAC,OAAO;QAAC,OAAO,EAAE,MAAMV,KAAK,CAACS,OAAO,EAAG;QAAA,UAAC;MAExD;QAAA;QAAA;QAAA;MAAA,QAAO,eACP;QAAA,wBACE;UAAA,WAAG,cAAY,EAACP,SAAS,GAAG,IAAI,GAAG,KAAK;QAAA;UAAA;UAAA;UAAA;QAAA,QAAK,eAC7C;UAAK,SAAS,EAAC,UAAU;UAAA,wBACvB;YAAA,uBACI;cAAA,UAEHD;YAAU;cAAA;cAAA;cAAA;YAAA;UACF;YAAA;YAAA;YAAA;UAAA,QACH,eACN;YAAA,WAEIY,EAAE,eAEN;cACA,GAAG,EAAEf,OAAQ;cACb,OAAO,EAAEF,iBAAiB,CAACgB,cAAe;cAC1C,KAAK,EAAC,IAAI;cACV,SAAS,EAAC;YAAgB;cAAA;cAAA;cAAA;YAAA,QAC1B,eACF;cAAQ,OAAO,EAAEhB,iBAAiB,CAACkB,aAAc;cAAA,UAAC;YAAI;cAAA;cAAA;cAAA;YAAA,QAAS;UAAA;YAAA;YAAA;YAAA;UAAA,QACvD;QAAA;UAAA;UAAA;UAAA;QAAA,QACF;MAAA;QAAA;QAAA;QAAA;MAAA,QAGF;IAAA;MAAA;MAAA;MAAA;IAAA;EACF;IAAA;IAAA;IAAA;EAAA,QACF;AAEV;AAAC,GApEQf,KAAK;EAAA,QAQRF,oBAAoB;AAAA;AAAA,KARjBE,KAAK;AAsEd,eAAeA,KAAK;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}